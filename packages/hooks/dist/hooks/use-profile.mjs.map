{"version":3,"sources":["../../src/hooks/use-profile.ts"],"names":[],"mappings":"AAGO,MAAM,aAAa,MAAM;AAC/B,EAAM,MAAA,cAAA,GAAiB,OAAO,IAAyB,KAAA;AACtD,IAAI,IAAA;AACH,MAAA,MAAM,MAAM,MAAM,KAAA;AAAA,QACjB,CAAA,EAAG,OAAQ,CAAA,GAAA,CAAI,mBAAmB,CAAA,iBAAA,CAAA;AAAA,QAClC;AAAA,UACC,MAAQ,EAAA,MAAA;AAAA,UACR,OAAS,EAAA;AAAA,YACR,cAAgB,EAAA,kBAAA;AAAA,WACjB;AAAA,UACA,WAAa,EAAA,SAAA;AAAA,UACb,IAAA,EAAM,IAAK,CAAA,SAAA,CAAU,IAAI,CAAA;AAAA,SAC1B;AAAA,OACD,CAAA;AACA,MAAQ,OAAA,MAAM,IAAI,IAAK,EAAA,CAAA;AAAA,aACf,KAAO,EAAA;AACf,MAAA,OAAA,CAAQ,IAAI,KAAK,CAAA,CAAA;AAAA,KAClB;AAAA,GACD,CAAA;AACA,EAAM,MAAA,YAAA,GAAe,OAAO,IAAuB,KAAA;AAClD,IAAI,IAAA;AACH,MAAA,MAAM,MAAM,MAAM,KAAA;AAAA,QACjB,CAAA,EAAG,OAAQ,CAAA,GAAA,CAAI,mBAAmB,CAAA,eAAA,CAAA;AAAA,QAClC;AAAA,UACC,MAAQ,EAAA,MAAA;AAAA,UACR,OAAS,EAAA;AAAA,YACR,cAAgB,EAAA,kBAAA;AAAA,WACjB;AAAA,UACA,IAAA,EAAM,IAAK,CAAA,SAAA,CAAU,IAAI,CAAA;AAAA,SAC1B;AAAA,OACD,CAAA;AACA,MAAQ,OAAA,MAAM,IAAI,IAAK,EAAA,CAAA;AAAA,aACf,KAAO,EAAA;AACf,MAAA,OAAA,CAAQ,IAAI,KAAK,CAAA,CAAA;AAAA,KAClB;AAAA,GACD,CAAA;AACA,EAAM,MAAA,QAAA,GAAW,OAAO,KAAkB,KAAA;AACzC,IAAI,IAAA;AACH,MAAA,MAAM,MAAM,MAAM,KAAA,CAAM,GAAG,OAAQ,CAAA,GAAA,CAAI,mBAAmB,CAAe,WAAA,CAAA,EAAA;AAAA,QACxE,MAAQ,EAAA,KAAA;AAAA,QACR,OAAS,EAAA;AAAA,UACR,aAAA,EAAe,UAAU,KAAK,CAAA,CAAA;AAAA,SAC/B;AAAA,OACA,CAAA,CAAA;AACD,MAAO,OAAA,MAAM,IAAI,IAAK,EAAA,CAAA;AAAA,aACd,KAAO,EAAA;AACf,MAAA,OAAA,CAAQ,IAAI,KAAK,CAAA,CAAA;AAAA,KAClB;AAAA,GACD,CAAA;AACA,EAAO,OAAA;AAAA,IACN,cAAA;AAAA,IACA,YAAA;AAAA,IACA,QAAA;AAAA,GACD,CAAA;AACD","file":"use-profile.mjs","sourcesContent":["import { AuthResponse, LoginWithDni, LoginWithEmail } from '@repo/common';\nimport { useMutation, useQuery } from '@tanstack/react-query';\n\nexport const useProfile = () => {\n\tconst loginWithEmail = async (data: LoginWithEmail) => {\n\t\ttry {\n\t\t\tconst req = await fetch(\n\t\t\t\t`${process.env.NEXT_PUBLIC_API_URL}/auth/login/email`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\tbody: JSON.stringify(data),\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn (await req.json()) as AuthResponse;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\tconst loginWithDni = async (data: LoginWithDni) => {\n\t\ttry {\n\t\t\tconst req = await fetch(\n\t\t\t\t`${process.env.NEXT_PUBLIC_API_URL}/auth/login/dni`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(data),\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn (await req.json()) as AuthResponse;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\tconst getRoles = async (token: string) => {\n\t\ttry {\n\t\t\tconst req = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/roles`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn await req.json();\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\treturn {\n\t\tloginWithEmail,\n\t\tloginWithDni,\n\t\tgetRoles,\n\t};\n};\n"]}